--liquibase formatted sql

--changeset nikita.ryadnov:1
CREATE SCHEMA IF NOT EXISTS banking
--changeset nikita.ryadnov:2
CREATE TABLE IF NOT EXISTS banking.user
(
    id            BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name          VARCHAR(500)       NOT NULL,
    date_of_birth VARCHAR(10)        NOT NULL CHECK (date_of_birth ~* '^\d{2}\.\d{2}\.\d{4}$'),
    PASSWORD      VARCHAR(500)       NOT NULL CHECK (char_length(PASSWORD) >= 8 AND char_length(PASSWORD) <= 500)
)
--changeset nikita.ryadnov:3 splitStatements:false
CREATE OR REPLACE FUNCTION banking.user_convert_date_before_insert_or_update_trigger_function() RETURNS TRIGGER
AS
$$
begin
    perform to_date(NEW.date_of_birth, 'DD.MM.YYYY');
    RETURN NEW;
end;
$$ LANGUAGE plpgsql;
--changeset nikita.ryadnov:4
CREATE
OR
REPLACE
TRIGGER check_date_of_birth
    BEFORE
INSERT OR
UPDATE OF date_of_birth
ON banking.user
    FOR EACH ROW
EXECUTE FUNCTION banking.user_convert_date_before_insert_or_update_trigger_function()
--changeset nikita.ryadnov:5
CREATE TABLE IF NOT EXISTS banking.account
(
    id      BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id BIGINT             NOT NULL UNIQUE REFERENCES banking.user (id) ON UPDATE CASCADE ON DELETE CASCADE,
    balance DECIMAL(21, 2)     NOT NULL CHECK (balance >= 0),
    initial_balance DECIMAL(21, 2)     NOT NULL CHECK (initial_balance >= 0) DEFAULT 0
)
--changeset nikita.ryadnov:6
CREATE TABLE IF NOT EXISTS banking.email_data
(
    id      BIGINT PRIMARY KEY  GENERATED BY DEFAULT AS IDENTITY,
    user_id BIGINT              NOT NULL REFERENCES banking.user (id) ON UPDATE CASCADE ON DELETE CASCADE,
    email   VARCHAR(200) UNIQUE NOT NULL
)
--changeset nikita.ryadnov:7
CREATE TABLE IF NOT EXISTS banking.phone_data
(
    id      BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id BIGINT             NOT NULL REFERENCES banking.user (id) ON UPDATE CASCADE ON DELETE CASCADE,
    phone   VARCHAR(13) UNIQUE NOT NULL CHECK (phone ~* '^\d{11}$')
)
--changeset nikita.ryadnov:8 splitStatements:false
CREATE OR REPLACE FUNCTION banking.add_balance_in_account_balance_from_account_trigger_function() RETURNS TRIGGER
AS
$$
begin
    UPDATE banking.account AS acc SET initial_balance = NEW.balance WHERE acc.id = NEW.id;
    RETURN null;
end;
$$ LANGUAGE plpgsql;
--changeset nikita.ryadnov:9
CREATE
OR
REPLACE
TRIGGER set_initial_balance
    AFTER
INSERT
ON banking.account
    FOR EACH ROW
EXECUTE FUNCTION banking.add_balance_in_account_balance_from_account_trigger_function()
--changeset nikita.ryadnov:10 splitStatements:false
CREATE OR REPLACE FUNCTION banking.update_balance_in_account(raise_limit INTEGER, coef INTEGER) RETURNS BOOLEAN
AS
$$
DECLARE
    acc RECORD;
    r_lim NUMERIC;
    to_coef NUMERIC;
BEGIN
    r_lim = raise_limit / 100.00;
    to_coef = 1 + coef / 100.00;
    FOR acc in SELECT * FROM banking.account LOOP
            update banking.account SET balance = CASE
                WHEN (balance * to_coef <= initial_balance * r_lim)
                    THEN balance * to_coef
                WHEN (balance > initial_balance * r_lim)
                    THEN balance
                    ELSE
                        initial_balance * r_lim
                END
            WHERE id = acc.id;
        END LOOP;
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;